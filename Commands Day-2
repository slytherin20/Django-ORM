python manage.py shell
Python 3.6.9 (default, Nov  7 2019, 10:44:02) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from main.models import Category
>>> Category.objects.create(category_title = 'Thai')
<Category: Thai>
>>> Category.objects.filter(category_title = 'Thai').delete()
(1, {'main.Category': 1})
>>> Category.objects.all()
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>, <Category: Chinese>, <Category: Mexican>, <Category: Japanese>]>
>>> cat = Category(category_title = 'Thai')
>>> cat.save()
>>> Category.objects.all()
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>, <Category: Chinese>, <Category: Mexican>, <Category: Japanese>, <Category: Thai>]>

>>> from main.models import Category
>>> cat = Category.objects.get(category_title = 'Thai')
>>> cat
<Category: Thai>
>>> from django.core.files import File
>>> cat.category_image.save('thai.jpg',File(open('thai.jpg','rb')))
>>> cat.category_summary = 'Thai food right here!!'
>>> cat.category_slug = 'thai'
>>> cat.save()
>>> cat
<Category: Thai>
>>> cat.category_summary
'Thai food right here!!'

>>> from main.models import Comment
>>> Comment.objects.all()
<QuerySet [<Comment: Comment by: Sonali---Loved it!>]>

>>> Comment.objects.bulk_create(
... [Comment(name = 'Sonali'),
... Comment(name = 'Akshita'),
... Comment(name = 'Sibhu')
... ])
[<Comment: Comment by: Sonali--->, <Comment: Comment by: Akshita--->, <Comment: Comment by: Sibhu--->]
>>> Comment.objects.all()
<QuerySet [<Comment: Comment by: Sonali---Loved it!>, <Comment: Comment by: Sonali--->, <Comment: Comment by: Akshita--->, <Comment: Comment by: Sibhu--->]>

>>> qs = Comment.objects.all()
>>> str(qs.query)
'SELECT "main_comment"."id", "main_comment"."title_id", "main_comment"."name", "main_comment"."email", "main_comment"."text", "main_comment"."created_on", "main_comment"."active" FROM "main_comment" ORDER BY "main_comment"."created_on" ASC'


>>> cat = Comment.objects.first()
>>> cat
<Comment: Comment by: Sonali---Loved it!>
>>> cat.name = 'SONALI'
>>> cat.save()
>>> Comment.objects.first()
<Comment: Comment by: SONALI---Loved it!>
>>> Comment.refresh_from_db()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: refresh_from_db() missing 1 required positional argument: 'self'
>>> Comment.refresh_from_db()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: refresh_from_db() missing 1 required positional argument: 'self'
>>> Comment.refresh_from_db(self)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'self' is not defined
>>> Comment.refresh_from_db(comment)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'comment' is not defined

>>> Comment.objects.filter(name = 'SONALI').update(name = 'Sonali')
1
>>> Comment.objects.first()
<Comment: Comment by: Sonali---Loved it!>

FIELD LOOKUPS--> Equivalent to Where clause
refresh_from_data()---> To get the value from database in case current value you are holding is wrong or updated.
IEXACT--> looks up exact name as case insensitive.

>>> Comment.objects.filter(name__iexact = "sonali")
<QuerySet [<Comment: Comment by: Sonali---Loved it!>, <Comment: Comment by: Sonali--->]>


Icontains: will do a Where query of LIKE Type:
>>> from main.models import Category
>>> Category.objects.filter(category_title__icontains = "an")
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>, <Category: Mexican>, <Category: Japanese>]>

OR Query-
Category.objects.filter(category_title__startswith='i') | Category.objects.filter(category_title__startswith='m')
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Mexican>]>

Q-->
A Q object (django.db.models.Q) is an object used to encapsulate a collection of keyword arguments. These keyword arguments are specified as in ‘Field lookups’”.
>>> from django.db.models import Q
>>> from main.models import Category
>>> Category.objects.filter(Q(category_title__startswith='i') | Q(category_title__startswith='m'))
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Mexican>]>

AND Query-

>>> Category.objects.filter(category_title__startswith='i') & Category.objects.filter(category_title__endswith='n')
<QuerySet [<Category: Italian>, <Category: Indian>]>
>>> Category.objects.filter(Q(category_title__startswith='i') & Q(category_title__endswith='n'))
<QuerySet [<Category: Italian>, <Category: Indian>]>

>>> Category.objects.filter(category_title__startswith='j',category_title__endswith='e')
<QuerySet [<Category: Japanese>]>

NOT Query-

**gt means greater than
**lt means less than

>>>Category.objects.exclude(id__gt = 3)
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>]>

>>> Category.objects.filter(~Q(id__gt = 3))
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>]>


UNION Query-

from main.models import Category
>>> q1 = Category.objects.filter(category_title__startswith = 'i')
>>> q2 = Category.objects.exclude(category_title__startswith = 'i')
>>> q1.union(q2)
<QuerySet [<Category: Italian>, <Category: Indian>, <Category: Korean>, <Category: Chinese>, <Category: Mexican>, <Category: Japanese>, <Category: Thai>]>

>>> Category.objects.all().values_list("category_title").union(Category.objects.all().values_list("category_title"))
<QuerySet [('Chinese',), ('Indian',), ('Italian',), ('Japanese',), ('Korean',), ('Mexican',), ('Thai',)]>


Subquery Query-

>>> from django.db.models import Subquery
>>> q = Comment.objects.filter(name = Subquery(user.values('username')))
>>> q

Annotate()--
It is used like using aggregation + group by.






























